/*******************************************************************************
 * Copyright (c) 2016 itemis AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Alexander NyÃŸen (itemis AG) - initial API and implementation
 *     
 *******************************************************************************/
grammar org.eclipse.gef4.dot.internal.parser.DotAttributes hidden(WS)

generate dotAttributes "http://www.eclipse.org/gef4/dot/internal/parser/DotAttributes"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DotAttributes:
	ArrowType | SplineType | Point | Style;

ArrowType:
	ArrowType_ArrowName | ArrowType_DeprecatedArrowName;

ArrowType_ArrowName:
	arrowShapes+=ArrowType_ArrowShape (arrowShapes+=ArrowType_ArrowShape (arrowShapes+=ArrowType_ArrowShape
	(arrowShapes+=ArrowType_ArrowShape)?)?)?;

ArrowType_ArrowShape:
	(open?="o")? (side?=("l" | "r"))? shape=ArrowType_ArrowPrimitiveShape;

ArrowType_DeprecatedArrowName:
	arrowShapes+=("ediamond" | "open" | "halfopen" | "empty" | "invempty");

enum ArrowType_ArrowPrimitiveShape:
	box="box" | crow="crow" | curve="curve" | icurve="icurve" | diamond="diamond" | dot="dot" | inv="inv" | none="none" |
	normal="normal" | tee="tee" | vee="vee";

SplineType:
	splines+=SplineType_Spline (";" splines+=SplineType_Spline)*;

SplineType_Spline:
	("e" "," endp=Point)? ("s" "," startp=Point)? controlPoints+=Point (controlPoints+=Point controlPoints+=Point
	controlPoints+=Point)+;
	
Point:
	x=DOUBLE "," y=DOUBLE ("," z=DOUBLE)? (inputOnly?="!")?;

Style:
	items+=Style_StyleItem ("," items+=Style_StyleItem)*;

Style_StyleItem:
	name=Style_Name ('(' args+=Style_Args ')')?;

Style_Args:
	names+=Style_Name (',' names+=Style_Name)*;

Style_Name:
// name can be any string of characters not containing a space, a left or right parenthesis, or a comma. Note that whitespace characters are ignored.
	STRING;

// return is "true", "yes", "false", "no" (all case insensitive), or an integer (0 is false, >0 is true)
BOOL returns ecore::EBoolean:
	"true" | "True" | "tRue" | "TRue" | "trUe" | "TrUe" | "tRUe" | "TRUe" | "truE" | "TruE" | "tRuE" | "TRuE" | "trUE" |
	"TrUE" | "tRUE" | "TRUE" | "yes" | "Yes" | "yEs" | "YEs" | "yeS" | "YeS" | "yES" | "YES" | "false" | "False" | "fAlse"
	| "FAlse" | "faLse" | "FaLse" | "fALse" | "FALse" | "falSe" | "FalSe" | "fAlSe" | "FAlSe" | "faLSe" | "FaLSe" |
	"fALSe" | "FALSe" | "falsE" | "FalsE" | "fAlsE" | "FAlsE" | "faLsE" | "FaLsE" | "fALsE" | "FALsE" | "falSE" | "FalSE"
	| "fAlSE" | "FAlSE" | "faLSE" | "FaLSE" | "fALSE" | "FALSE" | "no" | "No" | "nO" | "NO" | INT;

terminal STRING returns ecore::EString:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal DOUBLE returns ecore::EDouble:
	('-')? ('.' ('0'..'9')+) | ('0'..'9')+ ('.' ('0'..'9')*)?;

terminal INT returns ecore::EInt:
	('-')? ('0'..'9')+;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;