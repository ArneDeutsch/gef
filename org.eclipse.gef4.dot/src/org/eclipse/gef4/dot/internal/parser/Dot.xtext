/*******************************************************************************
 * Copyright (c) 2008, 2015 Michael Clay and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Michael Clay    - initial API and implementation (bug #277380)
 *    Fabian Steeg    - updates for current Xtext and minor tweaks
 *    Alexander NyÃŸen - fixed generation problems w.r.t. terminals (bug #429512)
 *                    - fixed problems resulting from non-optional subgraph names 
 *                      and shadowing of IDs by CommentPt literals (bug #430132)
 *                    - completely refactored grammar to be more consistent to 
 *                      Dot language definition (bug #451097)
 *                    - transferred CompassPt into terminal rule to realize case
 *                      insensitive keywords properly (bug #454626)
 * 
 *******************************************************************************/
grammar org.eclipse.gef4.dot.internal.parser.Dot hidden(WS, ML_COMMENT, SL_COMMENT)

generate dot "http://www.eclipse.org/gef4/dot/internal/parser/Dot"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GraphvizModel:
	(graphs+=DotGraph)*;

DotGraph:
	(strict?="strict")? type=GraphType (name=ID)? "{"
		(stmts+=Stmt)*
	"}";

Stmt:
	(Attribute | EdgeStmtNode | EdgeStmtSubgraph | NodeStmt | AttrStmt | Subgraph) (";")?;

EdgeStmtNode:
	node=NodeId (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*;

EdgeStmtSubgraph:
	subgraph=Subgraph (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*;

NodeStmt:
	node=NodeId (attrLists+=AttrList)*;

AttrStmt:
	type=AttributeType (attrLists+=AttrList)+;

AttrList:
	"[" (attributes+=Attribute ("," | ";")? )+ "]";

Attribute:
	name=ID "=" value=ID;

Subgraph:
	{Subgraph} ("subgraph" name=ID?)? "{" (stmts+=Stmt)* "}";

Port:
	":" name=ID (":" compass_pt=COMPASS_PT)? | ":" compass_pt=COMPASS_PT;

EdgeRhs:
	(EdgeRhsNode | EdgeRhsSubgraph);

EdgeRhsNode:
	op=EdgeOp node=NodeId;

EdgeRhsSubgraph:
	op=EdgeOp subgraph=Subgraph;

NodeId:
	name=ID (port=Port)?;

// compass point values are no keywords (and thus allowed as part of an ID), 
// whereas node, edge, graph, digraph, subgraph, strict are keywords (and thus not allowed as part of an ID)
ID:
	STRING | QUOTED_STRING | NUMERAL | COMPASS_PT;

enum EdgeOp:
	directed="->" | undirected="--";

enum GraphType:
	graph="graph" | digraph="digraph";

enum AttributeType:
	graph="graph" | node="node" | edge="edge";

terminal COMPASS_PT:
	'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w' | 'nw' | 'c' | '_';

terminal STRING:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	
terminal NUMERAL: 
	('-')? ('.' ('0'..'9')+) | ('0'..'9')+ ('.' ('0'..'9')*)?;
	
	
terminal QUOTED_STRING:
	('"' ('\\' '"' | !('"'))* '"');

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	('//' | '#') !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;
