/*******************************************************************************
 * Copyright (c) 2008, 2016 Michael Clay and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Michael Clay     - initial API and implementation (bug #277380)
 *    Fabian Steeg     - updates for current Xtext and minor tweaks
 *    Alexander NyÃŸen  - fixed generation problems w.r.t. terminals (bug #429512)
 *                     - fixed problems resulting from non-optional subgraph names 
 *                       and shadowing of IDs by CommentPt literals (bug #430132)
 *                     - completely refactored grammar to be more consistent to 
 *                       Dot language definition (bug #451097)
 *                     - transferred CompassPt into terminal rule to realize case
 *                       insensitive keywords properly (bug #454626)
 *                     - refactored grammar to be unambiguous (not relying on 
 *                       backtracking)
 *    Matthias Wienand - contribution for Bugzilla #321775
 * 
 *******************************************************************************/
grammar org.eclipse.gef4.dot.internal.parser.Dot hidden(WS, ML_COMMENT, SL_COMMENT)

generate dot "http://www.eclipse.org/gef4/dot/internal/parser/Dot"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GraphvizModel:
	(graphs+=DotGraph)*;

DotGraph:
	(strict?="strict")? type=GraphType (name=ID)? "{"
	(stmts+=Stmt)*
	"}";

	// XXX: We need to handle EdgeStmtSubgraph together with Subgraph, or the grammar would be ambiguous
Stmt:
	(NodeStmt | EdgeStmtNode | AttrStmt | Attribute | SubgraphOrEdgeStmtSubgraph) ";"?;

EdgeStmtNode:
	node=NodeId (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*;

EdgeStmtSubgraph:
	subgraph=Subgraph (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*;

NodeStmt:
	node=NodeId (attrLists+=AttrList)*;

AttrStmt:
	type=AttributeType (attrLists+=AttrList)+;

AttrList:
	"[" (attributes+=Attribute ("," | ";")?)+ "]";

Attribute:
	name=ID "=" value=AttributeValue;

AttributeValue:
	PlainValue | HtmlValue;

PlainValue:
	value=ID;

HtmlValue hidden(ML_COMMENT, SL_COMMENT, HTML_COMMENT):
	{HtmlValue} HTML_OPEN_BRACKET content=HtmlContent? HTML_CLOSE_BRACKET;

HtmlContent:
	contents+=(HtmlTag|HtmlText)+;

HtmlTag:
	HTML_OPEN_BRACKET name=(STRING|COMPASS_PT) attributes+=HtmlAttribute*
	( selfClosing?="/" HTML_CLOSE_BRACKET
	| HTML_CLOSE_BRACKET children+=HtmlContent? HTML_OPEN_BRACKET "/" closingTag=[HtmlTag] HTML_CLOSE_BRACKET);

HtmlAttribute:
	name=(STRING|COMPASS_PT) "=" value=ID;

HtmlText:
	=> fragments+=HTML_FRAGMENT+;

HTML_FRAGMENT:
	COMPASS_PT | STRING | NUMERAL | HTML_ENTITY | WS | ANY_OTHER;

	// XXX: We perform an assign action, so the parse tree is rewritten in case a subgraph is specified through an EdgeStmt
SubgraphOrEdgeStmtSubgraph:
	Subgraph ({EdgeStmtSubgraph.subgraph=current} (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*)?;

Subgraph:
	{Subgraph} ("subgraph" (name=ID)?)? "{" (stmts+=Stmt)* "}";

Port:
	=> ":" compass_pt=COMPASS_PT | (":" name=ID (":" compass_pt=COMPASS_PT)?);

EdgeRhs:
	(EdgeRhsNode | EdgeRhsSubgraph);

EdgeRhsNode:
	op=EdgeOp node=NodeId;

EdgeRhsSubgraph:
	op=EdgeOp subgraph=Subgraph;

NodeId:
	name=ID (port=Port)?;

	// XXX: While node, edge, graph, digraph, subgraph, and strict are keywords (and thus not allowed as part of an ID), compass point values are no keywords (and may thus be used as ID)
ID:
	STRING | QUOTED_STRING | NUMERAL | COMPASS_PT;

enum EdgeOp:
	directed="->" | undirected="--";

enum GraphType:
	graph="graph" | digraph="digraph";

enum AttributeType:
	graph="graph" | node="node" | edge="edge";

	// XXX: While keywords are case insensitive, compass point values are not; we thus parse them as terminals
terminal COMPASS_PT:
	'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w' | 'nw' | 'c' | '_';

terminal HTML_ENTITY:
	'&' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* ';';

terminal STRING:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal NUMERAL:
	('-')? ('.' ('0'..'9')+) | ('0'..'9')+ ('.' ('0'..'9')*)?;

terminal QUOTED_STRING:
	('"' ('\\' '"' | !('"'))* '"');

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	('//' | '#') !('\n' | '\r')* ('\r'? '\n')?;
	
terminal HTML_COMMENT:
	'<!--'->'-->';

terminal HTML_OPEN_BRACKET:
	'<';

terminal HTML_CLOSE_BRACKET:
	'>';

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;
