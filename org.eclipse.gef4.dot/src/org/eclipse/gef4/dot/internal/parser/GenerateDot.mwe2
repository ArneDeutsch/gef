/*******************************************************************************
 * Copyright (c) 2010 Fabian Steeg. All rights reserved. This program and the
 * accompanying materials are made available under the terms of the Eclipse
 * Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 * 		Fabian Steeg    - initial implementation (bug #277380)
 * 		Alexander Ny√üen - migration to Xtext 2.7.3 (bug #478562); 
 *                        support for case insensitive keywords (bug #454626)
 *                        integration of attribute grammars
 *      Tamas Miklossy	- support for junit test plugin generation
 *******************************************************************************/
module org.eclipse.gef4.dot.internal.parser.Dot

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "org.eclipse.gef4.dot"
var runtimeProject = "../${projectName}"
var encoding = "UTF-8"

Workflow {
	bean = StandaloneSetup {
		// register current projects and its siblings for platform URI map, as they are not on the classpath.
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		encoding = encoding
		language = auto-inject {
			// grammarURI has to be platform:/resource for headless execution (Tycho)
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef4/dot/internal/parser/Dot.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dot"
			
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// The antlr parser generator fragment (for case-insensitive keywords)
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// Java-based validation API
			fragment = validation.JavaValidatorFragment auto-inject {}

			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef4/dot/internal/parser/DotPoint.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dot_point"
			
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			// ensure DotPoint grammar is accessible to DotSplinesType grammar
			loadedResource = "platform:/resource/${projectName}/src/org/eclipse/gef4/dot/internal/parser/DotPoint.xtext"
			
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef4/dot/internal/parser/DotSplineType.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dot_splineType"
			
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef4/dot/internal/parser/DotArrowType.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dot_arrowType"
			
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
	}
}
