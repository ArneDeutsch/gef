/*******************************************************************************
 * Copyright (c) 2010 Fabian Steeg. All rights reserved. This program and the
 * accompanying materials are made available under the terms of the Eclipse
 * Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 * 		Fabian Steeg    - initial implementation (bug #277380)
 * 		Alexander Ny√üen - migration to Xtext 2.7.3 (bug #478562); 
 *                        support for case insensitive keywords (bug #454626)
 *******************************************************************************/
module org.eclipse.gef4.internal.dot.parser.Dot

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "org.eclipse.gef4.dot"
var grammarURI = "platform:/resource/${projectName}/src/org/eclipse/gef4/internal/dot/parser/Dot.xtext"
var fileExtensions = "dot"
var runtimeProject = "../${projectName}"
var encoding = "UTF-8"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
    	directory = "${runtimeProject}/model/generated"
    }

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		activator = "org.eclipse.gef4.internal.dot.parser.DotParserActivator"
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		encoding = encoding
		language = auto-inject {
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// The antlr parser generator fragment (for case-insensitive keywords)
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment auto-inject {
				options = {
					backtrack = true
					ignoreCase = true
				}
			}

			// Java-based validation API
			fragment = validation.JavaValidatorFragment auto-inject {}

			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					backtrack = true
					ignoreCase = true
				}
			}
		}
	}
}
