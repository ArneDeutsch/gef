<%@ jet package="org.eclipse.gef4.internal.dot" imports="org.eclipse.gef4.graph.* import org.eclipse.gef4.layout.algorithms.* org.eclipse.gef4.layout.*" class="DotTemplate" %>
<%/*******************************************************************************
 * Copyright (c) 2009, 2010 Fabian Steeg. All rights reserved. This program and 
 * the accompanying materials are made available under the terms of the Eclipse
 * Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * <p/>
 * Contributors: Fabian Steeg - initial API and implementation; see bug 277380
 *******************************************************************************/%>
<% Graph graph = (Graph) argument; %>
<% boolean small = graph.getNodes().size() < 100; %>
<% LayoutAlgorithm algo = (LayoutAlgorithm) (graph.getAttrs().get(Graph.Attr.Key.LAYOUT.toString()) != null ? graph.getAttrs().get(Graph.Attr.Key.LAYOUT.toString()) : new TreeLayoutAlgorithm());%>
<% boolean digraph = graph.getAttrs().get(Graph.Attr.Key.EDGE_STYLE.toString())==Graph.Attr.Value.CONNECTIONS_DIRECTED; %>
<% String simpleClassName = graph.getClass().getSimpleName(); %>
<% /* The exact name 'Graph' is not valid for rendering with Graphviz: */ %>
<% simpleClassName = simpleClassName.equals("Graph") ? "Dot" + simpleClassName : simpleClassName; %>

<%= digraph ? "digraph" : "graph" %> <%=simpleClassName%>{

	/* Global settings */
	graph[layout=<%=(algo.getClass() == RadialLayoutAlgorithm.class) ? "twopi" : (algo.getClass() == GridLayoutAlgorithm.class) ? "osage" : (algo.getClass() == SpringLayoutAlgorithm.class) ? (small ? "fdp" : "sfdp") : "dot"%>]
	node[shape=box]
	rankdir=<%=(graph.getAttrs().get(Graph.Attr.Key.LAYOUT.toString()) != null && graph.getAttrs().get(Graph.Attr.Key.LAYOUT.toString()).getClass() == TreeLayoutAlgorithm.class && ((TreeLayoutAlgorithm)graph.getAttrs().get(Graph.Attr.Key.LAYOUT.toString())).getDirection() == TreeLayoutAlgorithm.LEFT_RIGHT)?"LR":"TD"%>
	
	/* Nodes */
	<% for(Object nodeObject : graph.getNodes()){ Node node = (Node) nodeObject; %> 
	<%=node.hashCode()%>[label="<%=node.getAttrs().get(Graph.Attr.Key.LABEL.toString())%>"];
	<% }%>
	
	/* Edges */
	<% for(Object edgeObject : graph.getEdges()){ Edge edge = (Edge) edgeObject; %> 
	<%boolean dashed = edge.getAttrs().get(Graph.Attr.Key.EDGE_STYLE.toString()) == Graph.Attr.Value.LINE_DASH; boolean dotted = edge.getAttrs().get(Graph.Attr.Key.EDGE_STYLE.toString()) == Graph.Attr.Value.LINE_DOT;%> 
	<%=edge.getSource().hashCode()%> <%= digraph ? "->" : "--" %> <%=edge.getTarget().hashCode()%>[style=<%=dashed?"dashed":dotted?"dotted":"solid"%> label="<%=edge.getAttrs().get(Graph.Attr.Key.LABEL.toString())%>"];
	<% }%>
}